<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>crackme on h4x5p4c3's blog</title><link>/tags/crackme/</link><description>Recent content in crackme on h4x5p4c3's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright ©️ 2021</copyright><lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/crackme/index.xml" rel="self" type="application/rss+xml"/><item><title>hell86</title><link>/posts/hell86/</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate><guid>/posts/hell86/</guid><description>Author : ttlhacker challenge files Description : x86_64 linux binary (tested on debian 9 and ubuntu 18.04, should run on any distro). Takes one command line argument and outputs &amp;ldquo;OK!&amp;rdquo; if it&amp;rsquo;s correct, &amp;ldquo;Wrong&amp;rdquo; if it&amp;rsquo;s not. Partially written in C, actual verification routine is assembly. Don&amp;rsquo;t patch the binary, of course - find the correct input.
Lets open the binary in radare2 and we&amp;rsquo;ll look at the disassembly of the main function</description><content>&lt;ul>
&lt;li>Author : ttlhacker &lt;a href="https://crackmes.one/crackme/5bc0fe0033c5d4110a29b296">challenge files&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Description : x86_64 linux binary (tested on debian 9 and ubuntu 18.04, should run on any distro).
Takes one command line argument and outputs &amp;ldquo;OK!&amp;rdquo; if it&amp;rsquo;s correct, &amp;ldquo;Wrong&amp;rdquo; if it&amp;rsquo;s not. Partially written in C, actual verification routine is assembly.
Don&amp;rsquo;t patch the binary, of course - find the correct input.&lt;/p>
&lt;/blockquote>
&lt;p>Lets open the binary in radare2 and we&amp;rsquo;ll look at the disassembly of the main function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#960050;background-color:#1e0010">┌&lt;/span> &lt;span style="color:#ae81ff">110&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> main (&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv);
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; arg &lt;span style="color:#66d9ef">int&lt;/span> argc &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rdi
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; arg &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsi
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fc0&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span> push rbp ; [&lt;span style="color:#ae81ff">14&lt;/span>] &lt;span style="color:#f92672">-&lt;/span>r&lt;span style="color:#f92672">-&lt;/span>x section size &lt;span style="color:#ae81ff">4002&lt;/span> named .text
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fc1&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> push rbx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fc2&lt;/span> &lt;span style="color:#ae81ff">4889f&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span> mov rbp, rsi ; argv
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fc5&lt;/span> &lt;span style="color:#ae81ff">89f&lt;/span>b mov ebx, edi ; argc
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fc7&lt;/span> &lt;span style="color:#ae81ff">4883&lt;/span>ec08 sub rsp, &lt;span style="color:#ae81ff">8&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fcb&lt;/span> e8f6090000 call sigaltstack
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fd0&lt;/span> &lt;span style="color:#ae81ff">84&lt;/span>c0 test al, al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fd2&lt;/span> ba01000000 mov edx, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌─&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x00000fd7&lt;/span> &lt;span style="color:#ae81ff">744f&lt;/span> je &lt;span style="color:#ae81ff">0x1028&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fd9&lt;/span> e887090000 call sigill_handler
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fde&lt;/span> &lt;span style="color:#ae81ff">84&lt;/span>c0 test al, al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00000fe0&lt;/span> ba02000000 mov edx, &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌──&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x00000fe5&lt;/span> &lt;span style="color:#ae81ff">7441&lt;/span> je &lt;span style="color:#ae81ff">0x1028&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00000fe7&lt;/span> &lt;span style="color:#ae81ff">4863f&lt;/span>b movsxd rdi, ebx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00000fea&lt;/span> &lt;span style="color:#ae81ff">4889&lt;/span>ee mov rsi, rbp
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00000fed&lt;/span> e89e010000 call flag_verification
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00000ff2&lt;/span> &lt;span style="color:#ae81ff">4883f&lt;/span>&lt;span style="color:#ae81ff">801&lt;/span> cmp rax, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00000ff6&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d3dda1000. lea rdi, str.Wrong ; &lt;span style="color:#ae81ff">0x20d7&lt;/span> ; &lt;span style="color:#e6db74">&amp;#34;Wrong&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌───&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x00000ffd&lt;/span> &lt;span style="color:#ae81ff">7422&lt;/span> je &lt;span style="color:#ae81ff">0x1021&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│││&lt;/span> &lt;span style="color:#ae81ff">0x00000fff&lt;/span> &lt;span style="color:#ae81ff">4883f&lt;/span>&lt;span style="color:#ae81ff">802&lt;/span> cmp rax, &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│││&lt;/span> &lt;span style="color:#ae81ff">0x00001003&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d3dd31000. lea rdi, str.hell86_crackme__Please_pass_the_flag_as_a_command_line_argument. ; &lt;span style="color:#ae81ff">0x20dd&lt;/span> ; &lt;span style="color:#e6db74">&amp;#34;[hell86 crackme] Please pass the flag as a command-line argument.&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌────&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x0000100a&lt;/span> &lt;span style="color:#ae81ff">7415&lt;/span> je &lt;span style="color:#ae81ff">0x1021&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││││&lt;/span> &lt;span style="color:#ae81ff">0x0000100c&lt;/span> &lt;span style="color:#ae81ff">4885&lt;/span>c0 test rax, rax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││││&lt;/span> &lt;span style="color:#ae81ff">0x0000100f&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d3dbd1000. lea rdi, [&lt;span style="color:#ae81ff">0x000020d3&lt;/span>] ; &lt;span style="color:#e6db74">&amp;#34;OK!&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││││&lt;/span> &lt;span style="color:#ae81ff">0x00001016&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d05021100. lea rax, str.You_have_encountered_a_bug ; &lt;span style="color:#ae81ff">0x211f&lt;/span> ; &lt;span style="color:#e6db74">&amp;#34;You have encountered a bug&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││││&lt;/span> &lt;span style="color:#ae81ff">0x0000101d&lt;/span> &lt;span style="color:#ae81ff">480f45f&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> cmovne rdi, rax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││││&lt;/span> ; CODE XREFS from main &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0xffd&lt;/span>, &lt;span style="color:#ae81ff">0x100a&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└└───&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x00001021&lt;/span> e80affffff call sym.imp.puts ; &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>s)
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00001026&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>d2 xor edx, edx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> ; CODE XREFS from main &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0xfd7&lt;/span>, &lt;span style="color:#ae81ff">0xfe5&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└└─&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x00001028&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span>d0 mov eax, edx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000102a&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>a pop rdx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000102b&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>b pop rbx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000102c&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>d pop rbp
&lt;span style="color:#960050;background-color:#1e0010">└&lt;/span> &lt;span style="color:#ae81ff">0x0000102d&lt;/span> c3 ret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main function calls 3 functions respectively&lt;/p>
&lt;h2 id="sigaltstack-function">sigaltstack function&lt;/h2>
&lt;p>The first function allocates 0x2000 bytes on the heap for an alternate stack for the signal handlers and the stack pointer points to the new stack which had been allocated also the flags have been set to 0 and later on it calls the sigaltstack function and if it encounters any errors it free&amp;rsquo;s the allocated memory.&lt;/p>
&lt;p>This is an example for defining an alternate stack&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c"> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;signal.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ...
&lt;span style="color:#66d9ef">if&lt;/span> ((sigstk.ss_sp &lt;span style="color:#f92672">=&lt;/span> malloc(SIGSTKSZ)) &lt;span style="color:#f92672">==&lt;/span> NULL)
&lt;span style="color:#75715e">/* Error return. */&lt;/span>
sigstk.ss_size &lt;span style="color:#f92672">=&lt;/span> SIGSTKSZ;
sigstk.ss_flags &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (sigaltstack(&lt;span style="color:#f92672">&amp;amp;&lt;/span>sigstk,(stack_t &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
perror(&lt;span style="color:#e6db74">&amp;#34;sigaltstack&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The actual function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#960050;background-color:#1e0010">┌&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span>&lt;span style="color:#f92672">:&lt;/span> sigaltstack ();
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; var &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>var_8h &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x8&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; var &lt;span style="color:#66d9ef">int64_t&lt;/span> var_18h &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x18&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019c6&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> push rbx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019c7&lt;/span> bf00200000 mov edi, &lt;span style="color:#ae81ff">0x2000&lt;/span> ; &lt;span style="color:#e6db74">&amp;#34;X&lt;/span>&lt;span style="color:#ae81ff">\xbb\xff\xff\xff\xff\xff\xff\xb8\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ; size_t size
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019cc&lt;/span> &lt;span style="color:#ae81ff">4883&lt;/span>ec20 sub rsp, &lt;span style="color:#ae81ff">0x20&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019d0&lt;/span> e87bf5ffff call sym.imp.malloc ; &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">malloc&lt;/span>(size_t size)
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019d5&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>d2 xor edx, edx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019d7&lt;/span> &lt;span style="color:#ae81ff">4885&lt;/span>c0 test rax, rax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌─&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x000019da&lt;/span> &lt;span style="color:#ae81ff">743&lt;/span>b je &lt;span style="color:#ae81ff">0x1a17&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019dc&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7c2408 lea rdi, [var_8h]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019e1&lt;/span> &lt;span style="color:#ae81ff">4889&lt;/span>c3 mov rbx, rax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019e4&lt;/span> b906000000 mov ecx, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019e9&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>c0 xor eax, eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019eb&lt;/span> &lt;span style="color:#ae81ff">31f&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span> xor esi, esi
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019ed&lt;/span> f3ab rep stosd dword [rdi], eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019ef&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7c2408 lea rdi, [var_8h]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019f4&lt;/span> &lt;span style="color:#ae81ff">48&lt;/span>c744241800. mov qword [var_18h], &lt;span style="color:#ae81ff">0x2000&lt;/span> ; [&lt;span style="color:#ae81ff">0x2000&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0xffffffffffffbb58&lt;/span> ; &lt;span style="color:#e6db74">&amp;#34;X&lt;/span>&lt;span style="color:#ae81ff">\xbb\xff\xff\xff\xff\xff\xff\xb8\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019fd&lt;/span> &lt;span style="color:#ae81ff">48895&lt;/span>c2408 mov qword [var_8h], rbx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001a02&lt;/span> e899f5ffff call sym.imp.sigaltstack
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001a07&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span>c0 test eax, eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001a09&lt;/span> b201 mov dl, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌──&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x00001a0b&lt;/span> &lt;span style="color:#ae81ff">740&lt;/span>a je &lt;span style="color:#ae81ff">0x1a17&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00001a0d&lt;/span> &lt;span style="color:#ae81ff">4889&lt;/span>df mov rdi, rbx ; &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00001a10&lt;/span> e86bf5ffff call sym.imp.free ; &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">free&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr)
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> &lt;span style="color:#ae81ff">0x00001a15&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>d2 xor edx, edx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">││&lt;/span> ; CODE XREFS from sigaltstack &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0x19da&lt;/span>, &lt;span style="color:#ae81ff">0x1a0b&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└└─&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x00001a17&lt;/span> &lt;span style="color:#ae81ff">4883&lt;/span>c420 add rsp, &lt;span style="color:#ae81ff">0x20&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001a1b&lt;/span> &lt;span style="color:#ae81ff">88&lt;/span>d0 mov al, dl
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001a1d&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>b pop rbx
&lt;span style="color:#960050;background-color:#1e0010">└&lt;/span> &lt;span style="color:#ae81ff">0x00001a1e&lt;/span> c3 ret
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sigill-handler">sigill handler&lt;/h2>
&lt;p>This function initializes the &lt;code>SIGILL&lt;/code> handler it has two flags set &lt;code>SA_ONSTACK&lt;/code> and &lt;code>SA_SIGINFO&lt;/code> what does these flags do ????&lt;/p>
&lt;p>The man page for sigaction clearly mentions that :&lt;/p>
&lt;p>SA_ONSTACK If set and an alternate signal stack has been declared with sigaltstack(), the signal shall be delivered to the calling process on that stack.
Otherwise, the signal shall be delivered on the current stack.&lt;/p>
&lt;p>SA_SIGINFO If cleared and the signal is caught, the signal-catching function shall be entered as:&lt;/p>
&lt;p>void func(int signo);&lt;/p>
&lt;p>where signo is the only argument to the signal-catching function. In this case, the application shall use the sa_handler member to describe
the signal-catching function and the application shall not modify the sa_sigaction member.&lt;/p>
&lt;p>If SA_SIGINFO is set and the signal is caught, the signal-catching function shall be entered as:&lt;/p>
&lt;p>void func(int signo, siginfo_t *info, void *context);&lt;/p>
&lt;p>where two additional arguments are passed to the signal-catching function. The second argument shall point to an object of type siginfo_t explaining the reason why the signal was generated; the third argument can be cast to a pointer to an object of type ucontext_t to refer to the receiving thread&amp;rsquo;s context that was interrupted when the signal was delivered. In this case, the application shall use the sa_sigaction member to describe the signal-catching function and the application shall not modify the sa_handler member.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#960050;background-color:#1e0010">┌&lt;/span> &lt;span style="color:#ae81ff">97&lt;/span>&lt;span style="color:#f92672">:&lt;/span> sigill_handler ();
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; var &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span> &lt;span style="color:#f92672">*&lt;/span>act &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x8&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; var &lt;span style="color:#66d9ef">int64_t&lt;/span> var_10h &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x10&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; var &lt;span style="color:#66d9ef">int64_t&lt;/span> var_90h &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x90&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001965&lt;/span> &lt;span style="color:#ae81ff">53&lt;/span> push rbx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001966&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>c0 xor eax, eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001968&lt;/span> b926000000 mov ecx, &lt;span style="color:#ae81ff">0x26&lt;/span> ; &lt;span style="color:#e6db74">&amp;#39;&amp;amp;&amp;#39;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000196d&lt;/span> &lt;span style="color:#ae81ff">4881&lt;/span>eca00000. sub rsp, &lt;span style="color:#ae81ff">0xa0&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001974&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7c2408 lea rdi, [act]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001979&lt;/span> f3ab rep stosd dword [rdi], eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000197b&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d05c4ffff. lea rax, [&lt;span style="color:#ae81ff">0x00001946&lt;/span>]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001982&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7c2410 lea rdi, [var_10h]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001987&lt;/span> c78424900000. mov dword [var_90h], &lt;span style="color:#ae81ff">0x8000004&lt;/span> ; [&lt;span style="color:#ae81ff">0x8000004&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001992&lt;/span> &lt;span style="color:#ae81ff">4889442408&lt;/span> mov qword [act], rax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001997&lt;/span> e8c4f5ffff call sym.imp.sigfillset
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000199c&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>d2 xor edx, edx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000199e&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span>c0 test eax, eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">┌─&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x000019a0&lt;/span> &lt;span style="color:#ae81ff">7519&lt;/span> jne &lt;span style="color:#ae81ff">0x19bb&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019a2&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d5c2408 lea rbx, [act]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019a7&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>d2 xor edx, edx ; &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span> &lt;span style="color:#f92672">*&lt;/span>oldact
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019a9&lt;/span> bf04000000 mov edi, &lt;span style="color:#ae81ff">4&lt;/span> ; &lt;span style="color:#66d9ef">int&lt;/span> signum
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019ae&lt;/span> &lt;span style="color:#ae81ff">4889&lt;/span>de mov rsi, rbx ; &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span> &lt;span style="color:#f92672">*&lt;/span>act
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019b1&lt;/span> e8daf5ffff call sym.imp.sigaction ; &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> signum, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span> &lt;span style="color:#f92672">*&lt;/span>act, &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sigaction&lt;/span> &lt;span style="color:#f92672">*&lt;/span>oldact)
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019b6&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span>c0 test eax, eax
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019b8&lt;/span> &lt;span style="color:#ae81ff">0f&lt;/span>&lt;span style="color:#ae81ff">94&lt;/span>c2 sete dl
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; CODE XREF from sigill_handler &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0x19a0&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└─&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x000019bb&lt;/span> &lt;span style="color:#ae81ff">4881&lt;/span>c4a00000. add rsp, &lt;span style="color:#ae81ff">0xa0&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019c2&lt;/span> &lt;span style="color:#ae81ff">88&lt;/span>d0 mov al, dl
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000019c4&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>b pop rbx
&lt;span style="color:#960050;background-color:#1e0010">└&lt;/span> &lt;span style="color:#ae81ff">0x000019c5&lt;/span> c3 ret
&lt;/code>&lt;/pre>&lt;/div>&lt;p>lets dig deep down the handler routine&lt;/p>
&lt;p>The handler holds a struct uncontext and in which uc_mcontext holds the GPR&amp;rsquo;s (general purpose registers) for hell86 and as we see it uses the same registers of the x64 architecture for hell86&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">gef&lt;span style="color:#960050;background-color:#1e0010">➤&lt;/span> ptype ucontext_t
type &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ucontext_t&lt;/span> {
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> uc_flags;
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ucontext_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>uc_link;
stack_t uc_stack;
mcontext_t uc_mcontext;
sigset_t uc_sigmask;
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">_libc_fpstate&lt;/span> __fpregs_mem;
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> __ssp[&lt;span style="color:#ae81ff">4&lt;/span>];
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">gef&lt;span style="color:#960050;background-color:#1e0010">➤&lt;/span> ptype mcontext_t
type &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
gregset_t gregs;
fpregset_t fpregs;
&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> __reserved1[&lt;span style="color:#ae81ff">8&lt;/span>];
}
gef&lt;span style="color:#960050;background-color:#1e0010">➤&lt;/span> ptype gregset_t
type &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> [&lt;span style="color:#ae81ff">23&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/images/gpr.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">;DATA XREF from fcn&lt;span style="color:#ae81ff">.00001965&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0x197b&lt;/span>
&lt;span style="color:#ae81ff">0x00001946&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>b82a80000. mov rax, qword [rdx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xa8&lt;/span>] ; rax &lt;span style="color:#f92672">=&lt;/span> addr of ud2
&lt;span style="color:#ae81ff">0x0000194d&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7228 lea rsi, [rdx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span>] ; rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">register&lt;/span>(ucontext_t)
&lt;span style="color:#ae81ff">0x00001951&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d7802 lea rdi, [rax &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>] ; rdi &lt;span style="color:#f92672">=&lt;/span> the next bytes after the encountered ud2
&lt;span style="color:#ae81ff">0x00001955&lt;/span> &lt;span style="color:#ae81ff">4883&lt;/span>c00e add rax, &lt;span style="color:#ae81ff">0xe&lt;/span> ; rax &lt;span style="color:#f92672">=&lt;/span> points to the enocountered ud2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xe&lt;/span> &lt;span style="color:#f92672">=&lt;/span> next ud2
&lt;span style="color:#ae81ff">0x00001959&lt;/span> &lt;span style="color:#ae81ff">488982&lt;/span>a80000. mov qword [rdx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xa8&lt;/span>], rax
&lt;span style="color:#ae81ff">0x00001960&lt;/span> e97b050000 jmp &lt;span style="color:#ae81ff">0x1ee0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp"> ; CODE XREF from fcn&lt;span style="color:#ae81ff">.00001192&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x7ce&lt;/span>
&lt;span style="color:#ae81ff">0x00001ee0&lt;/span> &lt;span style="color:#ae81ff">0f&lt;/span>b65708 movzx edx, byte [rdi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>]
&lt;span style="color:#ae81ff">0x00001ee4&lt;/span> &lt;span style="color:#ae81ff">488&lt;/span>d05951120. lea rax, [&lt;span style="color:#ae81ff">0x00203080&lt;/span>]
&lt;span style="color:#ae81ff">0x00001eeb&lt;/span> ff24d0 jmp qword [rax &lt;span style="color:#f92672">+&lt;/span> rdx&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>]
&lt;span style="color:#ae81ff">0x00001eee&lt;/span> &lt;span style="color:#ae81ff">6690&lt;/span> nop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The byte at &lt;code>rdi+8&lt;/code> indexes a jump table at &lt;code>0x00203080&lt;/code> and the jump table which consists of 50 instructions for the vm to use and they are shown below&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#ae81ff">0x00203080&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a1f&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a20&lt;/span> ........ .......
&lt;span style="color:#ae81ff">0x00203090&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a39&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a52&lt;/span> &lt;span style="color:#ae81ff">9.&lt;/span>......R.......
&lt;span style="color:#ae81ff">0x002030a0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a6c&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001a87&lt;/span> l...............
&lt;span style="color:#ae81ff">0x002030b0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001aa2&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001abe&lt;/span> ................
&lt;span style="color:#ae81ff">0x002030c0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001ae6&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001ada&lt;/span> ................
&lt;span style="color:#ae81ff">0x002030d0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001afa&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b12&lt;/span> ................
&lt;span style="color:#ae81ff">0x002030e0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b2b&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b43&lt;/span> &lt;span style="color:#f92672">+&lt;/span>.......C.......
&lt;span style="color:#ae81ff">0x002030f0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b5c&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b73&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>.......s.......
&lt;span style="color:#ae81ff">0x00203100&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001b8b&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001ba3&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203110&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001bba&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001bd2&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203120&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001be9&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c01&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203130&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c1a&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c2e&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203140&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c43&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c54&lt;/span> C.......T.......
&lt;span style="color:#ae81ff">0x00203150&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c6d&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c86&lt;/span> m...............
&lt;span style="color:#ae81ff">0x00203160&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001c9f&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001cb3&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203170&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001cd2&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001cf1&lt;/span> ................
&lt;span style="color:#ae81ff">0x00203180&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001d10&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001d2f&lt;/span> ........&lt;span style="color:#f92672">/&lt;/span>.......
&lt;span style="color:#ae81ff">0x00203190&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001d4e&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001d6d&lt;/span> N.......m.......
&lt;span style="color:#ae81ff">0x002031a0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001d87&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001da1&lt;/span> ................
&lt;span style="color:#ae81ff">0x002031b0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001db9&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001dcf&lt;/span> ................
&lt;span style="color:#ae81ff">0x002031c0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001de5&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e07&lt;/span> ................
&lt;span style="color:#ae81ff">0x002031d0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e9c&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001ebe&lt;/span> ................
&lt;span style="color:#ae81ff">0x002031e0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e1e&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e32&lt;/span> .......&lt;span style="color:#ae81ff">.2&lt;/span>.......
&lt;span style="color:#ae81ff">0x002031f0&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e49&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e60&lt;/span> I.......&lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>.......
&lt;span style="color:#ae81ff">0x00203200&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e74&lt;/span> &lt;span style="color:#ae81ff">0x0000000000001e88&lt;/span> t...............
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="flag-function">FLag Function&lt;/h2>
&lt;p>This is the actual flag verification function, the first instruction is actually a &lt;code>ud2&lt;/code> instruction. so what does a ud2 instruction does? 🤔&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">opcode&lt;/th>
&lt;th style="text-align:center">memonic&lt;/th>
&lt;th style="text-align:right">description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>0f 0b&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;strong>UD2&lt;/strong>&lt;/td>
&lt;td style="text-align:right">&lt;strong>raise invalid opcode exception&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#960050;background-color:#1e0010">┌&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> flag_verification ();
&lt;span style="color:#960050;background-color:#1e0010">└&lt;/span> &lt;span style="color:#ae81ff">0x00001190&lt;/span> &lt;span style="color:#ae81ff">0f&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>b ud2
; CALL XREF from main &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> &lt;span style="color:#ae81ff">0xfed&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">┌&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>&lt;span style="color:#f92672">:&lt;/span> fcn&lt;span style="color:#ae81ff">.00001192&lt;/span> (&lt;span style="color:#66d9ef">int64_t&lt;/span> arg4);
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> ; arg &lt;span style="color:#66d9ef">int64_t&lt;/span> arg4 &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span> rcx
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001192&lt;/span> &lt;span style="color:#ae81ff">0200&lt;/span> add al, byte [rax]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001194&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001196&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x00001198&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x0000119a&lt;/span> &lt;span style="color:#ae81ff">090&lt;/span>d00000f0b or dword [&lt;span style="color:#ae81ff">0x0b0f11a0&lt;/span>], ecx ; [&lt;span style="color:#ae81ff">0xb0f11a0&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>]&lt;span style="color:#f92672">=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> ; arg4
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011a0&lt;/span> &lt;span style="color:#ae81ff">0200&lt;/span> add al, byte [rax]
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011a2&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011a4&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011a6&lt;/span> &lt;span style="color:#ae81ff">0000&lt;/span> add byte [rax], al
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011a8&lt;/span> &lt;span style="color:#ae81ff">2400&lt;/span> and al, &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#ae81ff">0x000011aa&lt;/span> &lt;span style="color:#ae81ff">0800&lt;/span> or byte [rax], al
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The structure of the instructions for hell86 would look like this&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ins&lt;/span> {
&lt;span style="color:#66d9ef">uint16_t&lt;/span> ud2;
&lt;span style="color:#66d9ef">uint64_t&lt;/span> imm;
&lt;span style="color:#66d9ef">uint8_t&lt;/span> opcode;
&lt;span style="color:#66d9ef">uint8_t&lt;/span> dest_reg;
&lt;span style="color:#66d9ef">uint8_t&lt;/span> source_reg_1;
&lt;span style="color:#66d9ef">uint8_t&lt;/span> source_reg_2;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we now know the routine of the handler its pretty easy to reverse the flag verification function so that being set we&amp;rsquo;ll need to make a disassembler and a script to reverse the flag function in order to get the flag&lt;/p>
&lt;h2 id="disassembler">Disassembler&lt;/h2>
&lt;p>we can use objdump or gdb to dump the flag verification function from the binary&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#960050;background-color:#1e0010">▲&lt;/span> reversing&lt;span style="color:#f92672">/&lt;/span>vm&lt;span style="color:#f92672">/&lt;/span>hell86 gef hell86
GEF &lt;span style="color:#66d9ef">for&lt;/span> linux ready, type &lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>gef&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> to start, &lt;span style="color:#960050;background-color:#1e0010">`&lt;/span>gef config&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> to configure
&lt;span style="color:#ae81ff">92&lt;/span> commands loaded &lt;span style="color:#66d9ef">for&lt;/span> GDB &lt;span style="color:#ae81ff">10.1&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> Python engine &lt;span style="color:#ae81ff">3.9&lt;/span>
Reading symbols from hell86...
(No debugging symbols found in hell86)
gef&lt;span style="color:#960050;background-color:#1e0010">➤&lt;/span> dump binary memory flag_func &lt;span style="color:#ae81ff">0x1190&lt;/span> &lt;span style="color:#ae81ff">0x1946&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As it was my first time creating a diassembler i got some help from a previously made disassembler.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">disassemble&lt;/span>(instructions):
registers &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;r8&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r9&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r10&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r11&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r12&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r13&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r14&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r15&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rdi&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rsi&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;rbp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rbx&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rdx&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rax&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rcx&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rsp&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rip&amp;#39;&lt;/span>]
asm_instr &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#e6db74">&amp;#39;nop&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># no operation&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} + {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># addition&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} - {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># subtract&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} * {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># multiply&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} / {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># division (quotient)&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} % {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># division (reminder)&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} &amp;gt;&amp;gt; {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># right shift&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} &amp;lt;&amp;lt; {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># left shift&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = -{2:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># negation&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># mov a, b&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = byte [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movzx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = byte [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movsx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = word [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movzx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = word [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movsx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = dword [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movzx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = dword [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># movsx&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} = qword [{2:s}+0x{0:x}]&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># mov&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;mov byte [{2:s}+0x{0:x}], {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;mov word [{2:s}+0x{0:x}], {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;mov dword [{2:s}+0x{0:x}], {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;mov qword [{2:s}+0x{0:x}], {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;push {2:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;push 0x{0:x}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;pop {1:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} | {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} &amp;amp; {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s} = {2:s} ^ {3:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s} = ~ {2:s}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;cmp.s {1:s}, {2:s}, {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># smaller&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.se {1:s}, {2:s}, {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># smaller or equal&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.g {1:s}, {2:s}, {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># greater&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.ge {1:s}, {2:s}, {3:s} &amp;#39;&lt;/span>, &lt;span style="color:#75715e"># greater or equal&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s} == {3:s} ; {1:s} = 1&amp;#39;&lt;/span>, &lt;span style="color:#75715e">#equal&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.in {1:s}, {2:s}, {3:s}&amp;#39;&lt;/span>, &lt;span style="color:#75715e">#inequal&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.eq {1:s}, {2:s}, 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># if equal to const&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{2:s} != 0x{0:x} ; {1:s} = 1&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># if inequal to const&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;cmp.z {1:s}, {2:s} ; {1:s} = {2:s} == 0 &amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;if {2:s} = 0 jmp 0x{0:x}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;if {2:s} != 0 jmp 0x{0:x}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;call 0x{0:x}&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;ret&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;if {2:s} != 0 ret&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;if {2:s} = 0 ret&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;lea {1:s}, [{2:s} + 0x{0:x}]&amp;#39;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#39;{1:s}, {2:s} &amp;gt;&amp;gt; 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># rshift&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s}, {2:s} &amp;lt;&amp;lt; 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># lshift&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s}, {2:s} | 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># or&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s}, {2:s} &amp;amp; 0x{0:x}&amp;#39;&lt;/span>, &lt;span style="color:#75715e"># and&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;{1:s}, {2:s} ^ 0x{0:x}&amp;#39;&lt;/span> &lt;span style="color:#75715e"># xor&lt;/span>
]
&lt;span style="color:#75715e">#print(len(assembly_mapping))&lt;/span>
addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1190&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> instructions:
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;{:&amp;gt;10s}&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(&lt;span style="color:#e6db74">&amp;#39;0x{:x}: &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(addr)), end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
instr &lt;span style="color:#f92672">=&lt;/span> int&lt;span style="color:#f92672">.&lt;/span>from_bytes(i[&lt;span style="color:#ae81ff">2&lt;/span>:&lt;span style="color:#ae81ff">10&lt;/span>], byteorder&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;little&amp;#39;&lt;/span>)
opcode &lt;span style="color:#f92672">=&lt;/span> i[&lt;span style="color:#ae81ff">10&lt;/span>]
arg1 &lt;span style="color:#f92672">=&lt;/span> registers[i[&lt;span style="color:#ae81ff">11&lt;/span>]]
arg2 &lt;span style="color:#f92672">=&lt;/span> registers[i[&lt;span style="color:#ae81ff">12&lt;/span>]]
arg3 &lt;span style="color:#f92672">=&lt;/span> registers[i[&lt;span style="color:#ae81ff">13&lt;/span>]]
&lt;span style="color:#66d9ef">print&lt;/span>(asm_instr[opcode]&lt;span style="color:#f92672">.&lt;/span>format(instr, arg1, arg2, arg3))
addr &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>
&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;flag_func&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
flag_func &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
instructions &lt;span style="color:#f92672">=&lt;/span> [flag_func[i&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>:(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(flag_func)&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">14&lt;/span>)]
disassemble(instructions)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now lets take a look at the actual disassembly of the vm&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp"> &lt;span style="color:#ae81ff">0x1190&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x2&lt;/span>
&lt;span style="color:#ae81ff">0x119e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x2&lt;/span> ; r8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">0x11ac&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r8 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x11ba&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x8&lt;/span>]
&lt;span style="color:#ae81ff">0x11c8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> qword [rsi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x11d6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11e4&lt;/span>
&lt;span style="color:#ae81ff">0x11e4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rbp
&lt;span style="color:#ae81ff">0x11f2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rbp &lt;span style="color:#f92672">=&lt;/span> rsp
&lt;span style="color:#ae81ff">0x1200&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsp, [rsp &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xfffffffffffffff0&lt;/span>]
&lt;span style="color:#ae81ff">0x120e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> mov qword [rbp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffffff0&lt;/span>], rdi
&lt;span style="color:#ae81ff">0x121c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x17da&lt;/span>
&lt;span style="color:#ae81ff">0x122a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x24&lt;/span> ; rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">0x1238&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rax &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x13ce&lt;/span>
&lt;span style="color:#ae81ff">0x1246&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x20cd&lt;/span>
&lt;span style="color:#ae81ff">0x1254&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x17da&lt;/span>
&lt;span style="color:#ae81ff">0x1262&lt;/span>&lt;span style="color:#f92672">:&lt;/span> mov qword [rbp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffffff8&lt;/span>], rax
&lt;span style="color:#ae81ff">0x1270&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> qword [rbp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffffff0&lt;/span>]
&lt;span style="color:#ae81ff">0x127e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x20cd&lt;/span>
&lt;span style="color:#ae81ff">0x128c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdx &lt;span style="color:#f92672">=&lt;/span> rax
&lt;span style="color:#ae81ff">0x129a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x182e&lt;/span>
&lt;span style="color:#ae81ff">0x12a8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rax &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x13ce&lt;/span>
&lt;span style="color:#ae81ff">0x12b6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> qword [rbp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffffff0&lt;/span>]
&lt;span style="color:#ae81ff">0x12c4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> byte [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x23&lt;/span>]
&lt;span style="color:#ae81ff">0x12d2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x7d&lt;/span> ; rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">0x12e0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x13ce&lt;/span>
&lt;span style="color:#ae81ff">0x12ee&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> qword [rbp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0xfffffffffffffff8&lt;/span>]
&lt;span style="color:#ae81ff">0x12fc&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> rdi &lt;span style="color:#f92672">+&lt;/span> rsi
&lt;span style="color:#ae81ff">0x130a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>rsi
&lt;span style="color:#ae81ff">0x1318&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x23&lt;/span>]
&lt;span style="color:#ae81ff">0x1326&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rsi
&lt;span style="color:#ae81ff">0x1334&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x1406&lt;/span>
&lt;span style="color:#ae81ff">0x1342&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rsi
&lt;span style="color:#ae81ff">0x1350&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x13ce&lt;/span>
&lt;span style="color:#ae81ff">0x135e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> rax
&lt;span style="color:#ae81ff">0x136c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rdi
&lt;span style="color:#ae81ff">0x137a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x15fe&lt;/span>
&lt;span style="color:#ae81ff">0x1388&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rdi
&lt;span style="color:#ae81ff">0x1396&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rax
&lt;span style="color:#ae81ff">0x13a4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x13b2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rax
&lt;span style="color:#ae81ff">0x13c0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x13dc&lt;/span>
&lt;span style="color:#ae81ff">0x13ce&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>
&lt;span style="color:#ae81ff">0x13dc&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsp &lt;span style="color:#f92672">=&lt;/span> rbp
&lt;span style="color:#ae81ff">0x13ea&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rbp
&lt;span style="color:#ae81ff">0x13f8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;span style="color:#ae81ff">0x1406&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x1414&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1422&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rdi
&lt;span style="color:#ae81ff">0x1430&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rsi
&lt;span style="color:#ae81ff">0x143e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi, rsi &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x3&lt;/span>
&lt;span style="color:#ae81ff">0x144c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x145a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rsi
&lt;span style="color:#ae81ff">0x1468&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rdi
&lt;span style="color:#ae81ff">0x1476&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1484&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> rax
&lt;span style="color:#ae81ff">0x1492&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r9 &lt;span style="color:#f92672">=&lt;/span> rax
&lt;span style="color:#ae81ff">0x14a0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push r9
&lt;span style="color:#ae81ff">0x14ae&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push r8
&lt;span style="color:#ae81ff">0x14bc&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rdi
&lt;span style="color:#ae81ff">0x14ca&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rsi
&lt;span style="color:#ae81ff">0x14d8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> byte [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x14e6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x20a0&lt;/span>
&lt;span style="color:#ae81ff">0x14f4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x18c8&lt;/span>
&lt;span style="color:#ae81ff">0x1502&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rsi
&lt;span style="color:#ae81ff">0x1510&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rdi
&lt;span style="color:#ae81ff">0x151e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop r8
&lt;span style="color:#ae81ff">0x152c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop r9
&lt;span style="color:#ae81ff">0x153a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x15c6&lt;/span>
&lt;span style="color:#ae81ff">0x1548&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r10 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x20a0&lt;/span>
&lt;span style="color:#ae81ff">0x1556&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> rax &lt;span style="color:#f92672">-&lt;/span> r10
&lt;span style="color:#ae81ff">0x1564&lt;/span>&lt;span style="color:#f92672">:&lt;/span> mov qword [r9&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>], rax
&lt;span style="color:#ae81ff">0x1572&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea r9, [r9 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x8&lt;/span>]
&lt;span style="color:#ae81ff">0x1580&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rdi, [rdi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x158e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffff&lt;/span>]
&lt;span style="color:#ae81ff">0x159c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x14a0&lt;/span>
&lt;span style="color:#ae81ff">0x15aa&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> r8
&lt;span style="color:#ae81ff">0x15b8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;span style="color:#ae81ff">0x15c6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdi &lt;span style="color:#f92672">=&lt;/span> r8
&lt;span style="color:#ae81ff">0x15d4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x15e2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x15f0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;span style="color:#ae81ff">0x15fe&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>
&lt;span style="color:#ae81ff">0x160c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x161a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x1628&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x16&lt;/span> ; r8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">0x1636&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r8 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1644&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rdi
&lt;span style="color:#ae81ff">0x1652&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rsi
&lt;span style="color:#ae81ff">0x1660&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x1724&lt;/span>
&lt;span style="color:#ae81ff">0x166e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rsi
&lt;span style="color:#ae81ff">0x167c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rdi
&lt;span style="color:#ae81ff">0x168a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffff&lt;/span>]
&lt;span style="color:#ae81ff">0x1698&lt;/span>&lt;span style="color:#f92672">:&lt;/span> push rdi
&lt;span style="color:#ae81ff">0x16a6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rdx, rsi &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x3&lt;/span>
&lt;span style="color:#ae81ff">0x16b4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1fa0&lt;/span>
&lt;span style="color:#ae81ff">0x16c2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> call &lt;span style="color:#ae81ff">0x182e&lt;/span>
&lt;span style="color:#ae81ff">0x16d0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> pop rdi
&lt;span style="color:#ae81ff">0x16de&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> rax
&lt;span style="color:#ae81ff">0x16ec&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>
&lt;span style="color:#ae81ff">0x16fa&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r8 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1708&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x1716&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;span style="color:#ae81ff">0x1724&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1732&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffff&lt;/span>]
&lt;span style="color:#ae81ff">0x1740&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rsi &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x174e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x175c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r9 &lt;span style="color:#f92672">=&lt;/span> qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x8&lt;/span>]
&lt;span style="color:#ae81ff">0x176a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">-&lt;/span> r8
&lt;span style="color:#ae81ff">0x1778&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">^&lt;/span> rsi
&lt;span style="color:#ae81ff">0x1786&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r9 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">*&lt;/span> r8
&lt;span style="color:#ae81ff">0x1794&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">*&lt;/span> r8
&lt;span style="color:#ae81ff">0x17a2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> mov qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>], r8
&lt;span style="color:#ae81ff">0x17b0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rdi, [rdi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x8&lt;/span>]
&lt;span style="color:#ae81ff">0x17be&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffff&lt;/span>]
&lt;span style="color:#ae81ff">0x17cc&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x1740&lt;/span>
&lt;span style="color:#ae81ff">0x17da&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x17e8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r10 &lt;span style="color:#f92672">=&lt;/span> byte [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x17f6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r10 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x1804&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rdi, [rdi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x1812&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rax, [rax &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x1820&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x17e8&lt;/span>
&lt;span style="color:#ae81ff">0x182e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x183c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rdx &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x184a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> byte [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x1858&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r9 &lt;span style="color:#f92672">=&lt;/span> byte [rsi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x1866&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">^&lt;/span> r9
&lt;span style="color:#ae81ff">0x1874&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> rax &lt;span style="color:#f92672">|&lt;/span> r8
&lt;span style="color:#ae81ff">0x1882&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rdx, [rdx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffff&lt;/span>]
&lt;span style="color:#ae81ff">0x1890&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rdi, [rdi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x189e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rsi, [rsi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x18ac&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> rdx &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x184a&lt;/span>
&lt;span style="color:#ae81ff">0x18ba&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;span style="color:#ae81ff">0x18c8&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> rdi
&lt;span style="color:#ae81ff">0x18d6&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> byte [rax&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
&lt;span style="color:#ae81ff">0x18e4&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> jmp &lt;span style="color:#ae81ff">0x192a&lt;/span>
&lt;span style="color:#ae81ff">0x18f2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> r8 &lt;span style="color:#f92672">==&lt;/span> rsi ; r8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">0x1900&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> r8 &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> ret
&lt;span style="color:#ae81ff">0x190e&lt;/span>&lt;span style="color:#f92672">:&lt;/span> lea rax, [rax &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x1&lt;/span>]
&lt;span style="color:#ae81ff">0x191c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rip &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x18d6&lt;/span>
&lt;span style="color:#ae81ff">0x192a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> rax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>
&lt;span style="color:#ae81ff">0x1938&lt;/span>&lt;span style="color:#f92672">:&lt;/span> ret
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="flag-verification">Flag verification&lt;/h2>
&lt;p>The actual verification goes like this&lt;/p>
&lt;ul>
&lt;li>if argc != 2 ; returns&lt;/li>
&lt;li>if input != len(flag) ; returns&lt;/li>
&lt;li>if input doesn&amp;rsquo;t start with &lt;code>FLAG{&lt;/code> ; returns&lt;/li>
&lt;li>if input doesn&amp;rsquo;t end with &lt;code>}&lt;/code> ; returns&lt;/li>
&lt;li>if flag[0] != &lt;code>x&lt;/code> ; returns&lt;/li>
&lt;li>now it verifies our flag with a global array of and checks if the indices of flag are correct&lt;/li>
&lt;li>now it compares it with a array at &lt;code>0x1fa0&lt;/code> and if they are equal returns 0 and prints &lt;code>OK!&lt;/code> if its correct or else it prints &lt;code>Wrong&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To verify the indices of the flag of which is between 30 characters with the global array it uses this algorithm&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">iterates over &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> times cause the len of the flag will be reduced &lt;span style="color:#66d9ef">as&lt;/span> we already know the first character which &lt;span style="color:#f92672">is&lt;/span> x
r8 &lt;span style="color:#f92672">=&lt;/span> qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>]
r9 &lt;span style="color:#f92672">=&lt;/span> qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x8&lt;/span>]
r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">-&lt;/span> r8
r8 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">^&lt;/span> rsi
r9 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">*&lt;/span> r8
r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">*&lt;/span> r8
mov qword [rdi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">0x0&lt;/span>], r8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The solve script using z3&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;span style="color:#f92672">from&lt;/span> z3 &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
characters &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;abdfgehikmanoqrstucvwlxyz-01h23p456u78j9-_.+&amp;#39;&lt;/span>
hash &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#ae81ff">5832&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">29791&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8000&lt;/span>, &lt;span style="color:#ae81ff">13824&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6859&lt;/span>, &lt;span style="color:#ae81ff">5832&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">29791&lt;/span>, &lt;span style="color:#ae81ff">24389&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">10648&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">24389&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">13824&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">17576&lt;/span>, &lt;span style="color:#ae81ff">2744&lt;/span>,
&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">17576&lt;/span>, &lt;span style="color:#ae81ff">19683&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">32768&lt;/span>, &lt;span style="color:#ae81ff">729&lt;/span>, &lt;span style="color:#ae81ff">19683&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">729&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#ae81ff">125&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">5832&lt;/span>, &lt;span style="color:#ae81ff">512&lt;/span>, &lt;span style="color:#ae81ff">512&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">6859&lt;/span>, &lt;span style="color:#ae81ff">8000&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8000&lt;/span>
]
x &lt;span style="color:#f92672">=&lt;/span> [BitVec(f&lt;span style="color:#e6db74">&amp;#39;x[{i}]&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">30&lt;/span>)] &lt;span style="color:#75715e"># 30 char of input&lt;/span>
s &lt;span style="color:#f92672">=&lt;/span> Solver()
s&lt;span style="color:#f92672">.&lt;/span>add(x[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span>) &lt;span style="color:#75715e"># first char = x&lt;/span>
indices &lt;span style="color:#f92672">=&lt;/span> []
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">29&lt;/span>): &lt;span style="color:#75715e"># len of flag - 1&lt;/span>
r8 &lt;span style="color:#f92672">=&lt;/span> x[i]
r9 &lt;span style="color:#f92672">=&lt;/span> x[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">-&lt;/span> r8
r8 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">^&lt;/span> (&lt;span style="color:#ae81ff">29&lt;/span> &lt;span style="color:#f92672">-&lt;/span> i) &lt;span style="color:#75715e"># rsi = 29 - i&lt;/span>
r9 &lt;span style="color:#f92672">=&lt;/span> r8 &lt;span style="color:#f92672">*&lt;/span> r8
r8 &lt;span style="color:#f92672">=&lt;/span> r9 &lt;span style="color:#f92672">*&lt;/span> r8
indices&lt;span style="color:#f92672">.&lt;/span>append(r8)
i&lt;span style="color:#f92672">+=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">29&lt;/span>):
s&lt;span style="color:#f92672">.&lt;/span>add(indices[i] &lt;span style="color:#f92672">==&lt;/span> hash[i])
s&lt;span style="color:#f92672">.&lt;/span>add(And(x[i] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, x[i] &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">44&lt;/span>))
flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>check() &lt;span style="color:#f92672">==&lt;/span> sat:
m &lt;span style="color:#f92672">=&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>model()
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">30&lt;/span>):
obj &lt;span style="color:#f92672">=&lt;/span> x[i]
flag &lt;span style="color:#f92672">+=&lt;/span> characters[m[obj]&lt;span style="color:#f92672">.&lt;/span>as_long()]
&lt;span style="color:#66d9ef">print&lt;/span>(s&lt;span style="color:#f92672">.&lt;/span>assertions())
&lt;span style="color:#66d9ef">print&lt;/span>(f&lt;span style="color:#e6db74">&amp;#34;FLAG{{{flag}}}&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And voila when we run the script we get the flag. We&amp;rsquo;ll check it actual binary which should print &lt;code>OK!&lt;/code> if its a valid flag&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#960050;background-color:#1e0010">▲&lt;/span> vm&lt;span style="color:#f92672">/&lt;/span>hell86&lt;span style="color:#f92672">/&lt;/span>solve &lt;span style="color:#f92672">./&lt;/span>solve
FLAG{x86&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>s&lt;span style="color:#f92672">-&lt;/span>s0&lt;span style="color:#f92672">-&lt;/span>fund4m3nt4lly&lt;span style="color:#f92672">-&lt;/span>br0k3n}
&lt;span style="color:#960050;background-color:#1e0010">▲&lt;/span> vm&lt;span style="color:#f92672">/&lt;/span>hell86&lt;span style="color:#f92672">/&lt;/span>solve &lt;span style="color:#f92672">./&lt;/span>hell86 FLAG{x86&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>s&lt;span style="color:#f92672">-&lt;/span>s0&lt;span style="color:#f92672">-&lt;/span>fund4m3nt4lly&lt;span style="color:#f92672">-&lt;/span>br0k3n}
OK&lt;span style="color:#960050;background-color:#1e0010">!&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was an awesome crackme
&lt;img src="/images/wll_done.gif" alt="">&lt;/p></content></item></channel></rss>